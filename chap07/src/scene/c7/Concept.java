package scene.c7;

// <7.7> 타입 변환과 다형성

public class Concept {

// 다형성은 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다.
// 다형성은 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.
// 다형성을 위해 자바는 부모 클래스로 타입 변환을 허용한다.
// => 부모 타입에 모든 자식 객체가 대입될 수 있다.

// <7.7.1> 자동 타입 변환
	// 자동 타입 변환은 프로그램 실행 도중에 자동적으로 타입 변환이 일어나는 것
	// 타입 변환 : 데이터 타입을 다른 데이터 타입으로 변환하는 행위
	// 부모 타입으로 자동 타입 변환된 이후에는 부모 클래스에 선언된 필드와 메소드만 접근 가능
	// 변수는 자식 객체를 참조하지만 변수로 접근 가능한 멤버는 부모 클래스 멤버로만 한정된다.
	// 오버라이딩된 메소드는 타입 변환 이후에도 자식 메소드가 호출된다.

// <7.7.2> 필드의 다형성
	// 필드의 타입은 변함이 없지만, 실행 도중에 어떤 객체를 필드로 저장하느냐에 따라
	// 실행 결과가 달라질 수 있는 것
    // 부모 클래스를 상속하는 자식 클래스는 상속받았기 때문에 사용방법이 동일하고,
    // 자식 클래스는 부모의 메소드를 오버라이딩해서 메소드의 실행 내용을 변경하여
    // 더 우수한 실행 결과를 이끌어 낼 수 있다.

// <7.7.3> 하나의 배열로 객체 관리
	// 배열로 관리하면 코드가 더 간결해지고 일관성이 생긴다.

// <7.7.4> 매개 변수의 다형성
	// 자동 타입 변환은 필드의 값을 대입할 때에도 발생하지만, 주로 메소드를 호출할 때 발생한다.
	// 메소드를 호출할 때에는 매개값을 다양화하기 위해 매개 변수에 자식 타입 객체를 지정할 수도 있다.
	// => 매개 변수의 타입이 클래스일 경우, 해당 클래스의 객체뿐만 아니라 자식 객체까지도 매개값으로 사용할 수 있다.

// <7.7.5> 강제 타입 변환(Casting)
	// 강제 타입 변환은 부모 타입을 자식 타입으로 변환하는 것을 말한다.
	// => 그렇다고 모든 부모 타입을 자식 클래스 타입으로 강제 변환할 수 있는 것은 아니다.
    // 자식 타입이 부모 타입으로 자동 변환하면, 부모 타입의 필드와 메소드만 사용할 수 있는데,
    // 강제 타입 변환을 이용하면 다시 자식 타입으로 변환이 가능하다.

// <7.7.6> 객체 타입 확인(instanceof)
  // 어떤 객체가 어떤 클래스의 인스턴스인지 확인할 때 사용
  // ex) boolean result = 좌항(객체) instanceof 우항(타입)
  // => 좌항의 객체가 우항의 인스턴스이면 (= 우항의 타입으로 객체가 생성되었다면)
  // true를 산출하고 그렇지 않으면 false를 산출한다.


}
